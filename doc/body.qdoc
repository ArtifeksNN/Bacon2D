/*!
  \qmltype Body
  \inqmlmodule Bacon2D
  \brief Bodies have position and velocity. You can apply forces, torques, and impulses to bodies. Bodies can be 
   static, kinematic, or dynamic.

   Bodies are the backbone for fixtures (shapes). Bodies carry fixtures and move them around in the world. 
   Bodies are always rigid bodies in Box2D. That means that two fixtures attached to the same rigid body 
   never move relative to each other and fixtures attached to the same body donâ€™t collide. 

   Fixtures have collision geometry and density. Normally, bodies acquire their mass properties from the 
   fixtures. However, you can override the mass properties after a body is constructed. 

*/

/*!
  \qmlproperty Body::BodyType Body::bodyType
  \brief The body type: static, kinematic, or dynamic. Note: if a dynamic body would have zero 
   mass, the mass is set to one.

  \table
   \header
     \li {2, 1} \e {Body::BodyType} is an enumeration:
   \header
     \li Type
     \li Description
   \row
     \li Body.Static (default)
     \li A static body does not move under simulation and behaves as if it has infinite mass. Internally, Box2D 
         stores zero for the mass and the inverse mass. Static bodies can be moved manually by the user. A static 
         body has zero velocity. Static bodies do not collide with other static or kinematic bodies. 
   \row
     \li Body.Kinematic
     \li A kinematic body moves under simulation according to its velocity. Kinematic bodies do not respond to 
         forces. They can be moved manually by the user, but normally a kinematic body is moved by setting its 
         velocity. A kinematic body behaves as if it has infinite mass, however, Box2D stores zero for the mass 
         and the inverse mass. Kinematic bodies do not collide with other kinematic or static bodies. 
   \row
     \li Body.Dynamic
     \li A kinematic body moves under simulation according to its velocity. Kinematic bodies do not respond to 
         forces. They can be moved manually by the user, but normally a kinematic body is moved by setting its 
         velocity. A kinematic body behaves as if it has infinite mass, however, Box2D stores zero for the mass 
         and the inverse mass. Kinematic bodies do not collide with other kinematic or static bodies. 
  \endtable
*/

/*!
  \qmlproperty float Body::gravityScale
  \brief You can use the gravity scale to adjust the gravity on a single body.
*/
/*!
  \qmlproperty float Body::linearDamping
  \brief Linear damping is use to reduce the linear velocity. The damping 
   parameter can be larger than 1.0f but the damping effect becomes sensitive 
   to the time step when the damping parameter is large.
*/
/*!
  \qmlproperty float Body::angularDamping
  \brief Angular damping is use to reduce the angular velocity. The damping 
   parameter can be larger than 1.0f but the damping effect becomes sensitive
   to the time step when the damping parameter is large.
*/
/*!
  \qmlproperty float Body::angularVelocity
  \brief The angular velocity of the body. 
*/
/*!
  \qmlproperty QPointF Body::linearVelocity
  \brief The linear velocity of the body's origin in world co-ordinates. 
*/
/*!
  \qmlproperty bool Body::bullet
  \brief Game simulation usually generates a sequence of images that are played at some frame rate. This is 
   called discrete simulation. In discrete simulation, rigid bodies can move by a large amount in one 
   time step. If a physics engine doesn't account for the large motion, you may see some objects incorrectly pass 
   through each other. This effect is called tunneling. 

   By default, Box2D uses continuous collision detection (CCD) to prevent dynamic bodies from tunneling 
   through static bodies. This is done by sweeping shapes from their old position to their new positions. 
   The engine looks for new collisions during the sweep and computes the time of impact (TOI) for these 
   collisions. Bodies are moved to their first TOI and then the solver performs a sub-step to complete the 
   full time step. There may be additional TOI events within a sub-step. 

   Normally CCD is not used between dynamic bodies. This is done to keep performance reasonable. In 
   some game scenarios you need dynamic bodies to use CCD. For example, you may want to shoot a high 
   speed bullet at a stack of dynamic bricks. Without CCD, the bullet might tunnel through the bricks. 
   Fast moving objects in Box2D can be labeled as bullets. Bullets will perform CCD with both static and 
   dynamic bodies. You should decide what bodies should be bullets based on your game design.
*/
/*!
  \qmlproperty bool Body::sleepingAllowed
  \brief What does sleep mean? Well it is expensive to simulate bodies, so the less we have to simulate the 
   better. When a body comes to rest we would like to stop simulating it. 

   When Box2D determines that a body (or group of bodies) has come to rest, the body enters a sleep 
   state which has very little CPU overhead. If a body is awake and collides with a sleeping body, then the 
   sleeping body wakes up. Bodies will also wake up if a joint or contact attached to them is destroyed. You 
   can also wake a body manually. 

   The sleepingAllowed property lets you specify whether a body can sleep and whether a body is created sleeping. 
*/
/*!
  \qmlproperty bool Body::fixedRotation
  \brief You may want a rigid body, such as a character, to have a fixed rotation. Such a body should not rotate, 
   even under load. You can use the fixedRotation property to achieve this.
*/
/*!
  \qmlproperty bool Body::active
  \brief FIXME
*/
/*!
  \qmlproperty bool Body::awake
  \brief True if the current state of the Body is awake, or False if it is sleeping.
*/
/*!
  \qmlproperty QQmlListProperty<Fixture> Body::fixtures
  \brief FIXME
*/
